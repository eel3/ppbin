#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) Command line tool to pretty-print binary file. Version 2.0.2.20220502

# Copyright (c) 2016 eel3
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#
#     2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#
#     3. This notice may not be removed or altered from any source
#     distribution.

"""Command line tool to pretty-print binary file.
"""

from __future__ import annotations

import argparse
import collections
import functools
import os
import struct
import sys

from dataclasses import dataclass
from typing import Any, BinaryIO, Final, NoReturn, Optional, TextIO, TypeVar

progname: Final[str] = os.path.basename(sys.argv[0])


@dataclass
class Options:
    """Data class for Option parameters.
    """
    add_prefix: str
    begin_of_file: Optional[str]
    delim: str
    end_of_file: Optional[str]
    files: list[str]
    indent_level: int
    little_endian: bool
    num_words_in_line: int
    output: TextIO
    print_size: int
    rtrim: bool
    use_tab: bool
    word_delim: str
    word_prefix: str
    word_size: int


def eprint(*args: Any, **keywords: Any) -> None:
    """Wrapper function of print() (for error messages).

    Args:
        *args (tuple): Variable length argument list.
        **keywords (dict[str, Any]): Arbitrary keyword arguments.
    """
    print(progname + ':', *args, file=sys.stderr, **keywords)


def make_indent(indent_level: int, use_tab: bool) -> str:
    """Make indent string.

    Args:
        indent_level (int): Indent level.
        use_tab (bool): Whether using tab character or not.

    Returns:
        str: Indent string.
    """
    c = '\t' if use_tab else ' '
    return c * indent_level


def format_pword(pword: bytes, print_fmt: str, unpack_fmt: str) -> str:
    """Format print-word size binary data.

    Args:
        pword (bytes): Print-word size binary data.
        print_fmt (str): Output format string.
        unpack_fmt (str): Unpack format string.

    Returns:
        str: Formatted string.
    """
    return print_fmt % struct.unpack(unpack_fmt, pword)


def format_word(wprefix: str, pwords: list[str], pdelim: str) -> str:
    """Format word size data.

    Args:
        wprefix (str): Prefix string for each word size data.
        pwords (list[str]): List of formatted print-word size data.
        pdelim (str): Delimiter string for each print-word size data.

    Returns:
        str: Formatted string.
    """
    return wprefix + pdelim.join(pwords)


def format_line(indent: str,
                words: list[str],
                wdelim: str,
                rtrim: bool) -> str:
    """Format 1 line data.

    Args:
        indent (str): Indent string.
        words (list[str]): List of formatted word size data.
        wdelim (str): Delimiter string for each word size data.
        rtrim (bool): Whether remove whitespace from the right end or not.

    Returns:
        str: Formatted string.
    """
    line = ''.join((indent, wdelim.join(words), wdelim))
    if rtrim:
        line = line.rstrip()
    return line + '\n'


def ppbin(istream: BinaryIO, ostream: TextIO, opts: Options) -> None:
    """Pretty-print binary data.

    Args:
        istream (BinaryIO): Input binary IO stream.
        ostream (TextIO): Output text IO stream.
        opts (Options): Option parameters.
    """
    word_size = opts.word_size
    pwsize = opts.print_size
    pwords = []
    print_fmt = opts.add_prefix + '%02X' * pwsize
    unpack_fmt = '%dB' % pwsize
    words = []
    indent = make_indent(opts.indent_level, opts.use_tab)
    wdelim = opts.word_delim
    rtrim = opts.rtrim

    if opts.begin_of_file is not None:
        ostream.write(opts.begin_of_file + '\n')

    for word in iter(functools.partial(istream.read, word_size), b''):
        if len(word) < word_size:
            raise ValueError('file size is indivisible by --word-size')
        if opts.little_endian:
            word = word[::-1]
        for i in range(0, word_size, pwsize):
            pwords.append(format_pword(word[i:i+pwsize], print_fmt, unpack_fmt))
        words.append(format_word(opts.word_prefix, pwords, opts.delim))
        del pwords[:]
        if len(words) >= opts.num_words_in_line:
            ostream.write(format_line(indent, words, wdelim, rtrim))
            del words[:]
    if len(words) > 0:
        ostream.write(format_line(indent, words, wdelim, rtrim))

    if opts.end_of_file is not None:
        ostream.write(opts.end_of_file + '\n')


def simplify_options(opts: argparse.Namespace,
                     as_list: list[str]=[]) -> Options:
    """Simplify option parameters.

    Args:
        opts (argparse.Namespace): Option parameters.
        as_list (list[str]): Attributes that treat as list.

    Returns:
        Options: Simplified option parameters.
    """
    def ispublicattr(attr_name: str) -> bool:
        """Check whether attribute is public or not.

        Args:
            attr_name (str): Attribute name.

        Returns:
            bool: True if attribute is public.
        """
        return attr_name and attr_name[0] != '_'

    def simplify_attr(attr_name: str) -> Any:
        """Simplify attribute value.

        Args:
            attr_name (str): Attribute name.

        Returns:
            Any: Simplified attribute value.
        """
        attr = getattr(opts, attr_name)

        if not isinstance(attr, list):
            return attr
        elif attr_name in as_list:
            return attr
        elif not attr:
            return None
        elif len(attr) > 1:
            return attr
        else:
            return attr[0]

    attrs = {name: simplify_attr(name) for name in dir(opts) if ispublicattr(name)}
    return Options(**attrs)


def parse_args() -> tuple[Options, list[str]]:
    """Parse CLI arguments.

    Returns:
        tuple[Options, list[str]]: Results of argument parsing.
    """
    parser = argparse.ArgumentParser(description=
            'Command line tool to pretty-print binary file.')

    parser.add_argument('files', metavar='file', nargs='*', help='binary file')
    parser.add_argument('-a', '--add-prefix', metavar='prefix', nargs=1,
                        default=[''], help='add prefix for each print-words')
    parser.add_argument('-A', '--word-prefix', metavar='prefix', nargs=1,
                        default=[''], help='add prefix for each words')
    parser.add_argument('-b', '--begin-of-file', metavar='header', nargs=1,
                        help='add header for each files')
    parser.add_argument('-d', '--delim', metavar='delimiter', nargs=1,
                        default=[' '],
                        help='delimiter for each words and print-words (partially overwritten by --word-delim)')
    parser.add_argument('-D', '--word-delim', metavar='delimiter', nargs=1,
                        help='delimiter for each words (partially overwrite --delim)')
    parser.add_argument('-e', '--end-of-file', metavar='footer', nargs=1,
                        help='add footer for each files')
    parser.add_argument('-i', '--indent-level', metavar='indent level', nargs=1,
                        type=int, default=[0], help='indent level')
    parser.add_argument('-l', '--little-endian', action='store_true',
                        help='interpret as little-endian')
    parser.add_argument('-n', '--num-words-in-line', metavar='num', nargs=1,
                        type=int, default=[1], help='number of words in line')
    parser.add_argument('-o', '--output', metavar='file', nargs=1,
                        type=argparse.FileType('w'), default=[sys.stdout],
                        help='place output in file')
    parser.add_argument('-p', '--print-size', metavar='print size', nargs=1,
                        type=int,
                        help='print-word size (must be less or equal to --word-size)')
    parser.add_argument('-r', '--rtrim', action='store_true',
                        help='remove whitespace from the right end of each lines (without header and footer)')
    parser.add_argument('-t', '--use-tab', action='store_true',
                        help='indent by tab')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 2.0.2')
    parser.add_argument('-w', '--word-size', metavar='word size', nargs=1,
                        type=int, default=[1], help='input word size')

    args = parser.parse_known_args()

    if not args[0].print_size:
        args[0].print_size = args[0].word_size
    if not args[0].word_delim:
        args[0].word_delim = args[0].delim

    return simplify_options(args[0], ['files']), args[1]


def main() -> NoReturn:
    """Main routine function.
    """
    args = parse_args()

    if args[0].indent_level < 0:
        eprint('error: --indent-level must be greater or equal to 0')
        sys.exit(1)

    if args[0].num_words_in_line < 1:
        eprint('error: --num-words-in-line must be greater or equal to 1')
        sys.exit(1)

    if args[0].word_size < 1:
        eprint('error: --word-size must be greater or equal to 1')
        sys.exit(1)

    if args[0].print_size < 1:
        eprint('error: --print-size must be greater or equal to 1')
        sys.exit(1)
    if args[0].print_size > args[0].word_size:
        eprint('error: --print-size must be less or equal to --word-size')
        sys.exit(1)
    if (args[0].word_size % args[0].print_size) != 0:
        eprint('error: --word-size must be divisible by --print-size')
        sys.exit(1)

    files = args[0].files
    if len(files) <= 0:
        files.append('-')

    ostream = args[0].output
    retval = 0

    for f in files:
        try:
            if f == '-':
                ppbin(sys.stdin.buffer, ostream, args[0])
            else:
                with open(f, 'rb') as istream:
                    ppbin(istream, ostream, args[0])
        except Exception as e:
            eprint(e)
            retval = 1

    sys.exit(retval)


if __name__ == '__main__':
    main()
