#!/usr/bin/env python
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) Command line tool to pretty-print binary file. Version 1.0.1.20161217

# Copyright (c) 2016 eel3
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#
#     2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#
#     3. This notice may not be removed or altered from any source
#     distribution.

from __future__ import print_function

import argparse
import struct
import sys


def eprint(*args, **keywords):
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def make_indent(indent_level, use_tab):
    c = '\t' if use_tab else ' '
    return c * indent_level


def format_word(word, size, prefix):
    return (prefix + '%02X' * size) % struct.unpack('%dB' % size, word)


def format_line(indent, pwords, delim):
    return ''.join((indent, delim.join(pwords), delim, '\n'))


def ppbin(istream, ostream, opts):
    word_size = opts.word_size
    pwsize = opts.print_size
    pwords = []
    prefix = opts.add_prefix
    npwords = (word_size / pwsize) * opts.num_words_in_line
    indent = make_indent(opts.indent_level, opts.use_tab)
    delim = opts.delim

    words = istream.read()
    it = (words[i:i+word_size] for i in range(0, len(words), word_size))
    for word in it:
        if len(word) < word_size:
            raise ValueError('file size is indivisible by --word-size')
        if opts.little_endian:
            word = word[::-1]
        for i in range(0, word_size, pwsize):
            pwords.append(format_word(word[i:i+pwsize], pwsize, prefix))
        if len(pwords) >= npwords:
            ostream.write(format_line(indent, pwords, delim))
            del pwords[:]
    if len(pwords) > 0:
        ostream.write(format_line(indent, pwords, delim))


def parse_args():
    parser = argparse.ArgumentParser(description=
            'Command line tool to pretty-print binary file.')

    parser.add_argument('files', metavar='file', nargs='*', help='binary file')
    parser.add_argument('-a', '--add-prefix', metavar='prefix', nargs='?',
                        const='', default='',
                        help='add prefix for each print word')
    parser.add_argument('-d', '--delim', metavar='delimiter', nargs='?',
                        const=' ', default=' ',
                        help='delimiter for each words')
    parser.add_argument('-i', '--indent-level', metavar='indent level',
                        nargs='?', type=int, const=0, default=0,
                        help='indent level')
    parser.add_argument('-l', '--little-endian', action='store_true',
                        help='interpret as little-endian')
    parser.add_argument('-n', '--num-words-in-line', metavar='num', nargs='?',
                        type=int, const=1, default=1,
                        help='number of words in line')
    parser.add_argument('-o', '--output', metavar='file', nargs='?',
                        type=argparse.FileType('w'), const=sys.stdout,
                        default=sys.stdout, help='place output in file')
    parser.add_argument('-p', '--print-size', nargs='?', type=int,
                        choices=[1, 2, 4, 8, 16],
                        help='print word size (must be less or equal to wordsize)')
    parser.add_argument('-t', '--use-tab', action='store_true',
                        help='indent by tab')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.0.1')
    parser.add_argument('-w', '--word-size', nargs='?', type=int, const=1,
                        default=1, choices=[1, 2, 4, 8, 16],
                        help='input word size')

    return parser.parse_known_args()


def main():
    args = parse_args()

    if args[0].indent_level < 0:
        eprint('error: --indent-level must be greater or equal to 0')
        sys.exit(1)

    if args[0].num_words_in_line < 1:
        eprint('error: --num-words-in-line must be greater or equal to 1')
        sys.exit(1)

    if args[0].print_size is None:
        args[0].print_size = args[0].word_size
    if args[0].print_size > args[0].word_size:
        eprint('error: --print-size must be less or equal to --word-size')
        sys.exit(1)

    files = args[0].files
    ostream = args[0].output
    retval = 0

    if len(files) <= 0:
        ppbin(sys.stdin, ostream, args[0])
    else:
        for f in files:
            if f == '-':
                ppbin(sys.stdin, ostream, args[0])
            else:
                try:
                    with open(f, 'rb') as istream:
                        ppbin(istream, ostream, args[0])
                except Exception as e:
                    eprint(e)
                    retval = 1

    sys.exit(retval)

if __name__ == '__main__':
    main();
